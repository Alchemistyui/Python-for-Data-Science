3 main parts of UNIX: shell, kernal, programs
shell is the interface btw the user and the kernal, act as a command line interpreter
command: programs that are excecuted by the shell
everything in UNIX is represented by a file or a process!
process: an excecuting program identified by a unique process identifier(PID).
file: a collection of data and are organized in a directory structure. 
directory: special files that contain other files.
files are organized in a hierarchical structure.(tree structure)
-------------
path: separate directories by /
absolute path: start at root(root is /)
relative path: start at working directory
(./ refers to working dir, .. refer to level above)
-------------
TILDE character(~): refer to the special user's home directory(dir under users)
pwd: command to check(print) the working dir
ls: list files and folders; options(-l: display in long form; -a: show hidden files)
cd: change dir
cat: show the content of text files(print the content)
man: manual pages; man ls: lookup documentation for ls
-------------
Utility Commands
mkdir: create dir
*: wildcard to replace any other character within a given pattern(ls *.txt)
stdin: usually from keyboard, can be switch to the file 
stdout: usually to the terminal, can be switch to file or process
stderr: usually to the terminal
cp: copy(cp source destination)
mv: move(mv source destination)
-------------
Redirect Standard IO
redirect stdin to file: command < file
redirect stdout to file(rewrite): command > file / command 1> file
redirect stdout to file(append): command >> file
redirect stderr to file: command 2> file
redirect stderr to file(append): command 2>> file
redirect stdout & stderr: command 2> file1 > file2
redirect stdout & stderr to the same file: command > file 2>&1
-------------
cat: show the content of text files(print the content)
more: fit the content in the shell, press space to go through, Q to quit
sort: sort file content by alphabetical order(sort a.txt > b.txt)
uniq: get the unique lines of the file
wc: word count(opt: -l count lines)(default output # of lines, words, chars)
who: who are loged in the unix
a; b(semicolon operator): execute a and after that excecute b(pwd; ls -l)
parenthesis: "(pwd; ls -l) > /dev/null" -> ():priority, /dev/null:ignore output
-------------
UNIX pipe & filters
pipe: send the output of one command to the input of another
cat foo.txt | wc
filter: is placed after unix pipe, take the input and transform it in someway
filters: grep(search for lines with a given string/look for a pattern), more, less, sort, uniq, cat, wc
ps: command for reporting process status(-aef: every process associated with all the terminals in the system)

-------------
filter command
grep, sort, uniq, cat, wc
head, tail, cut, sed, find
head: list the 1st n lines in text file or input stream
cut: cut a portion of each lines of a file
sed: stream editor, perform basic text transformation on an input stream
find: quick search in file system or hierarchy
eg: sed -e 's/ /\'$'\n/g' < shakespeare.txt | sort | sed '/^$/d' | uniq -c | sort -nr | head -15 > most_appear.txt
explain: sed1 convert each space btw words in the file into a new line(/g: global, ' /': space, '/\'$'\n': newline); sed2 remove the remaining black lines; uniq -c: get the unique words and their counts, sort -nr: numerical sort

-------------
live coding cls
head -5 fruits* : match all files begin with fruits
(head -2; tail -2) < fruits* : get the first 2 lines and last 2 lines
paste: merge all files into one file side by side, so its very powerful when create table data(paste fruits* > all.txt)
***: when dataset bigger, it's harder for unix shell to execute (but python has libs to do it efficiently)
---
ps -aef | cut -c3-5 | sort | uniq -c | sort -nr | head -3
dscl . -list /Users UniqueID: show the users and their UID
ps -aef: UID(0-system, 501-1st mac user), PID, PPID
cut -c3-5: cut the section from character 3 to char 5
---
ps -aef | cut -c3-5 | sort | grep 501 | wc -l
---
gnuplot: plot imgs










